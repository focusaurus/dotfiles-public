{
  "numStartups": 7,
  "theme": "light-daltonized",
  "customApiKeyResponses": {
    "approved": [
      "d16XABnzGag-NSvb9QAA"
    ],
    "rejected": []
  },
  "tipsHistory": {
    "memory-command": 1,
    "theme-command": 3,
    "prompt-queue": 4,
    "new-user-warmup": 5
  },
  "userID": "a1685271c8e5ee552b815cd1b8d76b103ff74af45b25275864c4dc2409eb8691",
  "oauthAccount": {
    "accountUuid": "3894798b-aefb-435b-98b2-1a9132ee2079",
    "emailAddress": "pete@float.health",
    "organizationUuid": "88ea7003-415c-4827-a2c6-7240e7f60d7c",
    "organizationRole": "developer",
    "workspaceRole": null
  },
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "0.2.72",
  "projects": {
    "/Users/plyons/github.com/float-health/pbtopostman": {
      "allowedTools": [
        "Bash(go build:*)",
        "Bash(go doc:*)",
        "Bash(go test:*)"
      ],
      "history": [
        {
          "display": "adjust the default make target to pass --pre-request=pre-request.js",
          "pastedText": null
        },
        {
          "display": "let's add a Makefile with targets: build, test, and postman (which should be the default and should process all .proto files in protos dir excluding third_party and output float-grpc.postman.json",
          "pastedText": null
        },
        {
          "display": "now fix README to account for .proto file paths come in through stdin not command line arguments",
          "pastedText": null
        },
        {
          "display": "now fix the tests so they pass and are not skipped",
          "pastedText": null
        },
        {
          "display": "let's add a command line argument --pre-request=path/to/file.js that will attach a pre-request javascript file to the top level folder of the postman collection",
          "pastedText": null
        },
        {
          "display": "great! Now let's add some unit tests around the core parsing and modeling logic. Use github.com/stretchr/testify/assert for assertions.",
          "pastedText": null
        },
        {
          "display": "let's organize the code more nicely into core library functionality and functions and leave main.go just dealing with the command line argument invocation particulars",
          "pastedText": null
        },
        {
          "display": "don't overwrite the postman_rest.json file. That's a reference sample. Output to test.json instead.",
          "pastedText": null
        },
        {
          "display": "get input .proto files with `find` and pipe that output to pbtopostman as the input mechanism",
          "pastedText": null
        },
        {
          "display": "let's make sure we are parsing the structure of grpc request messages and converting that to json HTTP bodies for the postman definitions",
          "pastedText": null
        },
        {
          "display": "trying to import the generate .json file into postman is failing with some errors. Let's double check our schema matches and is compatible with the postman_rest.json example",
          "pastedText": null
        },
        {
          "display": "test by passing .proto paths containing service definition to stdin, not command line arguments",
          "pastedText": null
        },
        {
          "display": "OK so now let's take many .proto file paths on stdin (typically output from the find command) and parse them all and output a single coherent json document including all endpoints defined within those proto files",
          "pastedText": null
        },
        {
          "display": "OK now that we are parsing .proto, our goal is to generate postman endpoint definitions in the postman json syntax. You can learn this syntax by studying postman_rest.json. Work toward this, can we print postman json syntax to stdout especially the request.method, request.url, and item.name.",
          "pastedText": null
        },
        {
          "display": "start a go command line program. Accept as a command line argument a path to a .proto file. Parse that file. For every rpc endpoint defined, print the full package and service path to stdout as well as the http path to invoke over http",
          "pastedText": null
        },
        "/init"
      ],
      "dontCrawlDirectory": false,
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "enableAllProjectMcpServers": false,
      "hasTrustDialogAccepted": true,
      "ignorePatterns": [],
      "hasCompletedProjectOnboarding": true,
      "lastCost": 4.093455499999996,
      "lastAPIDuration": 1321369,
      "lastDuration": 151499949,
      "lastLinesAdded": 2107,
      "lastLinesRemoved": 821,
      "lastSessionId": "19518e90-22ef-457e-b1ee-abfb20abd980"
    },
    "/Users/plyons/.config/zsh": {
      "allowedTools": [],
      "history": [
        {
          "display": "can I configure zsh tab completion to always fall back to filesystem completion for every command without exception",
          "pastedText": null
        }
      ],
      "dontCrawlDirectory": false,
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "enableAllProjectMcpServers": false,
      "hasTrustDialogAccepted": true,
      "ignorePatterns": [],
      "lastCost": 0.26111835,
      "lastAPIDuration": 59122,
      "lastDuration": 1458992,
      "lastLinesAdded": 3,
      "lastLinesRemoved": 0,
      "lastSessionId": "22186e11-b0d5-4b78-b684-2c5c4578c981"
    },
    "/Users/plyons/github.com/float-health/float-core": {
      "allowedTools": [],
      "history": [
        {
          "display": "In the output json, we are duplicating named parameters across both query parameters and path parameters. An example is pharmacy_id in the GetPharmacy endpoint. Fix the code to only define query parameters in the postman json if the proto definition really gets them through the query string.",
          "pastedContents": {}
        },
        {
          "display": "load cmd/pbtopostman/CLAUDE.md",
          "pastedContents": {}
        },
        {
          "display": "some of the .proto files we analyze in pbtopostman have path parameters that are mistakenly mapped to query string parameters in the float-grpc.postman.json file we generate. Fix the code to properly render the postman json for path parameters.",
          "pastedContents": {}
        },
        {
          "display": "I want to fix handling of path parameters vs query string parameters. We mostly use path parameters which are named in the .proto files using {curly_brace_syntax}. Make sure our postman json properly maps path parameters.",
          "pastedContents": {}
        },
        {
          "display": "load cmd/pbtopostman/CLAUDE.md",
          "pastedContents": {}
        },
        {
          "display": "I want to make a small tweak to pbtopostman. In the generate postman JSON output, the folder names should include both the package prefix and the service name. So \"nurses.NurseService\" instead of just \"NurseService\"",
          "pastedContents": {}
        },
        {
          "display": "load cmd/pbtopostman/CLAUDE.md",
          "pastedContents": {}
        }
      ],
      "dontCrawlDirectory": false,
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "enableAllProjectMcpServers": false,
      "hasTrustDialogAccepted": true,
      "ignorePatterns": [],
      "projectOnboardingSeenCount": 4,
      "exampleFiles": [
        "internal/services/visits/visitservice.go",
        "internal/services/aftervisitreports/update.go",
        "internal/db/assignment_data_select.go",
        "internal/float/assignments.go",
        "internal/services/visits/mappers.go"
      ],
      "exampleFilesGeneratedAt": 1746459648911,
      "lastCost": 1.0740954999999999,
      "lastAPIDuration": 328539,
      "lastDuration": 1914493,
      "lastLinesAdded": 59,
      "lastLinesRemoved": 10,
      "lastSessionId": "33cdb894-ac55-4f8d-babf-3726c6a9a83b"
    }
  },
  "cachedChangelog": "# Changelog\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1746648720178,
  "lastReleaseNotesSeen": "0.2.78",
  "isQualifiedForDataSharing": false,
  "statsigModel": {
    "bedrock": "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
    "vertex": "claude-3-7-sonnet@20250219",
    "firstParty": "claude-3-7-sonnet-20250219"
  },
  "maxSubscriptionNoticeCount": 0,
  "hasAvailableMaxSubscription": false
}