{
	"Test Dev": {
		"prefix": "testdev",
		"description": "ad hoc code execution",
		"scope": "",
		"body": [
			"func TestDev(t *testing.T){",
			"\tassert.Equal(t, expected, bar)",
			"}"
		]
	},
  "iferrreturnerr": {
    "body": [
      "if err != nil {",
      "\\treturn nil, fmt.Errorf(\"${1:message}: %w\", err)",
      "}",
      ""
    ],
    "description": "go error handling boilerplate",
    "prefix": "iferr"
  },
  "tdt": {
    "body": [
		"func Test${1:SomeFunc}(t *testing.T) {",
		"\ttests := map[string]struct {",
		"\t\tinput    interface{}",
		"\t\texpected interface{}",
		"\t}{",
		"\t\t\"base case\": 42,",
		"\t}",
		"",
		"\t// To debug a particular test case first, add ! as a prefix to it's description.",
		"\t// It will sort to the beginning and run first",
		"\tkeys := make([]string, 0)",
		"\tfor k := range tests {",
		"\t\tkeys = append(keys, k)",
		"\t}",
		"\tsort.Strings(keys)",
		"",
		"\tfor _, desc := range keys {",
		"\t\tt.Run(desc, func(t *testing.T) {",
		"\t\t\ttest, _  := tests[desc]",
		"\t\t\tactual := SomeFunc(test.input)",
		"\t\t\tassert.EqualValues(t, test.expected, actual)",
		"\t\t})",
		"\t}",
		"}",
		""
	],
    "description": "table-driven test (generic, gotest.tools/assert)",
    "prefix": "tdt"
  }
}
