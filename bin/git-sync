#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # do nott ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging

IFS="$(printf "\n\t")"
# ---- End unofficial bash strict mode boilerplate

sync_dir() {
  if ! ~/bin/git-is-repo; then
    echo "Not syncing: not git repo: ${PWD}"
    return
  fi
  if ! ~/bin/git-is-default-branch; then
    echo "${ME}: not syncing: not default branch: ${PWD}"
    return
  fi
  if ! ~/bin/git-is-work-tree-clean; then
    echo "${ME}: work tree not clean. Press ENTER to launch gitui."
    # shellcheck disable=SC2034
    read -r wait_for_enter
    if [[ -n "${GIT_DIR}" ]]; then
      #gitui does not currently support bare repos.
      # Need tig in this case.
      tig
    else
      gitui
    fi
  fi
  # if ! ~/bin/git-is-work-tree-clean; then
  #   echo "Work tree not clean. Not syncing."
  #   return
  # fi
  echo -n "${ME}: syncing: ${PWD} "
  GIT_EDITOR=true git pull --quiet
  git push --quiet
  echo âœ“
}

main() {
  for dir in "$@"; do
    if [[ ! -d "${dir}" ]]; then
      echo "${ME}: skip: not directory: ${dir}"
      continue
    fi
    cd "${dir}"
    # Special handling for home directory dotfiles
    if [[ "${PWD}" == "${HOME}" ]]; then
      export GIT_DIR="${HOME}/.home.git" GIT_WORK_TREE="${HOME}"
    else
      unset GIT_DIR GIT_WORK_TREE
    fi
    sync_dir
    cd - >/dev/null
  done
}

ME="$(basename "$0")"
main "$@"
